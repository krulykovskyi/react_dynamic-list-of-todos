{"version":3,"sources":["components/TodoList/TodoList.jsx","utils/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","selectedTodo","title","select","selectTodo","setState","name","value","this","props","todos","selectUser","filteredByStatus","filter","todo","completed","className","htmlFor","placeholder","id","type","onChange","event","target","handleChange","map","includes","key","classNames","checked","onClick","userId","React","PureComponent","defaultProps","request","url","fetch","then","response","json","CurrentUser","user","takeUser","prevProps","data","email","phone","Component","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"gXAMaA,G,MAAb,4MACEC,MAAQ,CACNC,aAAc,EACdC,MAAO,GACPC,OAAQ,OAJZ,EAOEC,WAAa,SAACH,GACZ,EAAKI,SAAS,CAAEJ,kBARpB,kDAWE,SAAaK,EAAMC,GACjBC,KAAKH,SAAL,eAAiBC,EAAOC,MAZ5B,oBAeE,WAAU,IAAD,OACP,EAGIC,KAAKC,MAFPC,EADF,EACEA,MACAC,EAFF,EAEEA,WAGF,EAIIH,KAAKR,MAHPC,EADF,EACEA,aACAC,EAFF,EAEEA,MACAC,EAHF,EAGEA,OAGIS,EAAmBF,EAAMG,QAAO,SAACC,GACrC,OAAQX,GACN,IAAK,MACH,OAAOW,EAET,IAAK,YACH,OAAOA,EAAKC,UAEd,IAAK,SACH,OAAQD,EAAKC,UAEf,QACE,OAAOD,MAIb,OACE,yBAAKE,UAAU,YACb,sCAEA,yBAAKA,UAAU,4BACb,2BAAOC,QAAQ,eAAf,mBAEE,2BACED,UAAU,wBACVE,YAAY,eACZZ,KAAK,QACLa,GAAG,cACHC,KAAK,OACLb,MAAOL,EACPmB,SAAU,SAACC,GACT,MAAwBA,EAAMC,OAAtBjB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAKiB,aAAalB,EAAMC,MAG5B,4BACES,UAAU,mBACVV,KAAK,SACLC,MAAOJ,EACPkB,SAAU,SAACC,GACT,MAAwBA,EAAMC,OAAtBjB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAKiB,aAAalB,EAAMC,KAG1B,uCACA,0CACA,+CAGJ,wBAAIS,UAAU,kBACXJ,EAAiBa,KAAI,SAAAX,GAAI,OACxBA,EAAKZ,MAAMwB,SAASxB,IACpB,wBACEyB,IAAKb,EAAKK,GACVH,UAAWY,IAAW,iBAAkB,CACtC,0BAA2Bd,EAAKC,UAChC,6BAA8BD,EAAKC,aAGrC,+BACE,2BACEC,UAAWY,IAAW,SACtBR,KAAK,WACLS,QAASf,EAAKC,YAEhB,2BACGD,EAAKZ,QAIV,4BACEc,UAAWY,IAAW,SAAU,CAC9B,kCAAmCd,EAAKK,KAAOlB,IAEjDmB,KAAK,SACLU,QAAS,WACPnB,EAAWG,EAAKiB,QAChB,EAAK3B,WAAWU,EAAKK,MAPzB,YAWGL,EAAKiB,mBA9GxB,GAA8BC,IAAMC,gBAsIpClC,EAASmC,aAAe,CACtBxB,MAAO,I,UC3IIyB,EAAU,SAAAC,GAAG,OAAIC,MAAM,GAAD,OAFlB,kCAEkB,OAAeD,IAC/CE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCEhBC,EAAb,4MACEzC,MAAQ,CACN0C,KAAM,IAFV,uDAKE,WACElC,KAAKmC,SAASnC,KAAKC,MAAMsB,UAN7B,gCASE,SAAmBa,GACbA,EAAUb,SAAWvB,KAAKC,MAAMsB,QAClCvB,KAAKmC,SAASnC,KAAKC,MAAMsB,UAX/B,sBAeE,SAASA,GAAS,IAAD,OACfI,EAAQ,UAAD,OAAWJ,IACfO,MAAK,SAACI,GACL,EAAKrC,SAAS,CAAEqC,KAAMA,EAAKG,YAlBnC,oBAsBE,WAAU,IAAD,OACCH,EAASlC,KAAKR,MAAd0C,KAER,OACE,yBAAK1B,UAAU,eACb,wBAAIA,UAAU,sBACZ,mDAEG0B,EAAKvB,KAIV,wBAAIH,UAAU,qBAAqB0B,EAAKpC,MACxC,uBAAGU,UAAU,sBAAsB0B,EAAKI,OACxC,uBAAG9B,UAAU,sBAAsB0B,EAAKK,OACxC,4BACE/B,UAAU,4BACVI,KAAK,SACLU,QAAS,WACP,EAAKzB,SAAS,CAAEqC,KAAM,OAJ1B,cArCR,GAAiCV,IAAMgB,WAuDvCP,EAAYP,aAAe,CACzBH,OAAQ,G,ICRKkB,E,4MA7CbjD,MAAQ,CACNU,MAAO,GACPwC,eAAgB,I,EAclBvC,WAAa,SAACuC,GACZ,EAAK7C,SAAS,CAAE6C,oB,uDAZlB,WAAqB,IAAD,OAClBf,EAAQ,UACLG,MAAK,SAAC5B,GACL,EAAKL,SAAS,CACZK,MAAOA,EAAMmC,KAAKhC,QAChB,SAAAC,GAAI,OAAIA,EAAKZ,OAASY,EAAKiB,iB,oBAUrC,WACE,MAAkCvB,KAAKR,MAA/BU,EAAR,EAAQA,MAAOwC,EAAf,EAAeA,eACPvC,EAAeH,KAAfG,WAER,OACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEN,MAAOA,EACPC,WAAYA,KAIhB,yBAAKK,UAAU,gBACb,yBAAKA,UAAU,0BACZkC,EACC,kBAAC,EAAD,CAAanB,OAAQmB,IACnB,0B,GAtCElB,IAAMgB,WCHxBG,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3d84288e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    selectedTodo: 0,\n    title: '',\n    select: 'all',\n  }\n\n  selectTodo = (selectedTodo) => {\n    this.setState({ selectedTodo });\n  }\n\n  handleChange(name, value) {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const {\n      todos,\n      selectUser,\n    } = this.props;\n\n    const {\n      selectedTodo,\n      title,\n      select,\n    } = this.state;\n\n    const filteredByStatus = todos.filter((todo) => {\n      switch (select) {\n        case 'all':\n          return todo;\n\n        case 'completed':\n          return todo.completed;\n\n        case 'active':\n          return !todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <label htmlFor=\"title-input\">\n            Search by title:\n            <input\n              className=\"TodoList__title-input\"\n              placeholder=\"filter todos\"\n              name=\"title\"\n              id=\"title-input\"\n              type=\"text\"\n              value={title}\n              onChange={(event) => {\n                const { name, value } = event.target;\n\n                this.handleChange(name, value);\n              }}\n            />\n            <select\n              className=\"TodoList__select\"\n              name=\"select\"\n              value={select}\n              onChange={(event) => {\n                const { name, value } = event.target;\n\n                this.handleChange(name, value);\n              }}\n            >\n              <option>all</option>\n              <option>active</option>\n              <option>completed</option>\n            </select>\n          </label>\n          <ul className=\"TodoList__list\">\n            {filteredByStatus.map(todo => (\n              todo.title.includes(title) && (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    className={classNames('input')}\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                  />\n                  <p>\n                    {todo.title}\n                  </p>\n                </label>\n\n                <button\n                  className={classNames('button', {\n                    'TodoList__user-button--selected': todo.id === selectedTodo,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                    this.selectTodo(todo.id);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n              )\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ),\n  selectUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json());\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { request } from '../../utils/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.takeUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.takeUser(this.props.userId);\n    }\n  }\n\n  takeUser(userId) {\n    request(`/users/${userId}`)\n      .then((user) => {\n        this.setState({ user: user.data });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"button CurrentUser__clear\"\n          type=\"button\"\n          onClick={() => {\n            this.setState({ user: {} });\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n};\n\nCurrentUser.defaultProps = {\n  userId: 0,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './utils/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 10,\n  };\n\n  componentDidMount() {\n    request('/todos')\n      .then((todos) => {\n        this.setState({\n          todos: todos.data.filter(\n            todo => todo.title && todo.userId,\n          ),\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n    const { selectUser } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}